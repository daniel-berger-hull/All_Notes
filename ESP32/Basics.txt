
BASIC COMMANDS
==============

 Note: You may have to run  the C:\data\Electronic\ESP_chips\esp-idf\esp-idf\export.bat at the beginning of your session.
       Otherwise, the Python script idf.py does not appear to be recognized...

	#1 idf.py create-project <project name>
	#2 idf.py set-target <project name>
	#3 idf.py build 

	#4 idf.py -p (PORT) flash
	    Note: A press on the boot loader button (On the opposite side of the led of the board) required

	#5 idf.py -p (PORT) monitor
	   Note: This time, it may not require a push on the bootload button (not on the ESP32S I tested dough)
	   
	   Led Pin --> #2 (The blue led on the board)
	   
	   
	   
See:
	  
	  ESP API:
		  https://docs.espressif.com/projects/esp-idf/en/latest/esp32/api-reference/index.html
	  
	  Build and running an simple project:
		   https://www.youtube.com/watch?v=dOVjb2wXI84
	  
	  Basics of RTOS:  
		   https://www.youtube.com/watch?v=F321087yYy4
	 
	 
	 
ESPTOOL
=======

  Core tool to access the esp32 chips and perfom low level function (read,write or erase flash, get chip id, read,write memory):
  
   Tool location:
    	C:\Users\dxb160\Documents\ArduinoData\packages\esp32\tools\esptool_py\3.3.0>esptool.exe

   Commands (More exist than those listed here):
   
     write_flash
	
	
	Here an example from a Blink example downloaded using Arduino IDE  (params are normally on the same line...)
	C:\Users\dxb160\Documents\ArduinoData\packages\esp32\tools\esptool_py\3.3.0/esptool.exe 
	--chip esp32 
	--port COM6 
	--baud 921600 
	--before default_reset 
	--after hard_reset write_flash 
	-z --flash_mode dio --flash_freq 80m --flash_size 4MB 0x1000 
	C:\Users\dxb160\AppData\Local\Temp\arduino_build_156472/Blink.ino.bootloader.bin 0x8000 
	C:\Users\dxb160\AppData\Local\Temp\arduino_build_156472/Blink.ino.partitions.bin 0xe000 
	C:\Users\dxb160\Documents\ArduinoData\packages\esp32\hardware\esp32\2.0.4/tools/partitions/boot_app0.bin 0x10000 
	C:\Users\dxb160\AppData\Local\Temp\arduino_build_156472/Blink.ino.bin 