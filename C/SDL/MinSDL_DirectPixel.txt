#include <SDL.h>

#include <stdio.h>

//Screen dimension constants
const int SCREEN_WIDTH = 640;
const int SCREEN_HEIGHT = 480;



// The 2 minimal object required
SDL_Window*  gWindow        = NULL;
SDL_Surface* gScreenSurface = NULL;


//The basic methods of an SDL application... 
bool init();
void close();
int  redrawScreen();


bool init()
{
	bool success = true;

	//Initialize SDL
	if (SDL_Init(SDL_INIT_EVERYTHING) < 0)
	{
		printf("SDL could not initialize! SDL_Error: %s\n", SDL_GetError());
		success = false;
	}
	else
	{
		//Create window
		gWindow = SDL_CreateWindow("Galois Random Number", // creates a window
			SDL_WINDOWPOS_CENTERED,
			SDL_WINDOWPOS_CENTERED,
			SCREEN_WIDTH, SCREEN_HEIGHT, 0);		
		if (gWindow == NULL)
		{
			printf("Window could not be created! SDL_Error: %s\n", SDL_GetError());
			success = false;
		}
		else
		{
			//Get window surface
			gScreenSurface = SDL_GetWindowSurface(gWindow);

		}
	}

	return success;
}

void close()
{
    SDL_FreeSurface(gScreenSurface);
	gScreenSurface = NULL;

	//Destroy window
	SDL_DestroyWindow(gWindow);
	gWindow = NULL;

	//Quit SDL subsystems
	SDL_Quit();
}


int redrawScreen()
{
	int width     = gScreenSurface->w;
	int height    = gScreenSurface->h;	
	unsigned int*  video_mem = (unsigned int*)gScreenSurface->pixels;

	for (int x = 0; x < width; x++)
		for (int y = 0; y < height; y++)
		{
			video_mem[x + y * width] = 0xffff00ff;
			// Or this version
			//video_mem[x + y * width] = SDL_MapRGBA(gScreenSurface->format, x % 256, y % 256, (x + y) % 256, 255);

		}
		
	SDL_UpdateWindowSurface(gWindow);

	return 0;
}


int main(int argc, char* args[])
{

	//Start up SDL and create window
	if (!init())
	{
		printf("Failed to initialize!\n");
	}
	else
	{
		//Main loop flag
		bool quit = false;

		//Event handler
		SDL_Event e;

		//While application is running
		while (!quit)
		{
			//Handle events on queue
			while (SDL_PollEvent(&e) != 0)
			{
				//User requests quit
				if (e.type == SDL_QUIT)
				{
					quit = true;
				}
				//User presses a key
				else if (e.type == SDL_KEYDOWN)
				{
					//Select surfaces based on key press
					switch (e.key.keysym.scancode)
					{
					case SDL_SCANCODE_ESCAPE:
						// handling of close button
						//cl.draw(render); 
						quit = true;
						break;
					case SDL_SCANCODE_UP:
						//gCurrentSurface = gKeyPressSurfaces[KEY_PRESS_SURFACE_UP];
						printf("Down\n");
						break;

					case SDL_SCANCODE_DOWN:
						//gCurrentSurface = gKeyPressSurfaces[KEY_PRESS_SURFACE_DOWN];
						printf("Up\n");
						break;


					}

				}
			}


			redrawScreen();
			// calculates to 60 fps
			//SDL_Delay(1000 / 60);

		}
		
	}

	//Free resources and close SDL
	close();
   
	return 0;
}
